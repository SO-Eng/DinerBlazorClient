@page "/Order/Create"
@inject HttpClient Http
@inject NavigationManager navigationManager


<h3>Create</h3>

@if (!string.IsNullOrWhiteSpace(errorString))
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (foodItems.Count == 0)
{
    <h4>Record Loading... <a class="spinner-border text-info"></a></h4>
}
else
{
    <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@order" />  @*gives the Message back if wrong*@
        <div class="form-group">
            <label class="control-label">Item to Order</label>
            <select @bind="order.FoodId" class="form-control">
                <option value="0">Select a meal...</option>
                @foreach (var food in foodItems)
                {
                    <option value="@food.Id">@food.Title</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label class="control-label">Quantity</label>
            <InputNumber @bind-Value="@order.Quantity" class="form-control" />
            <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
        </div>
        <div class="form-group">
            <label class="control-label">Name for the Orderer</label>
            <InputText @bind-Value="@order.OrderName" class="form-control" />
            <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
        </div>
        <div class="form-group">
            <input type="submit" value="Order Food" class="btn btn-primary" />
        </div>
    </EditForm>

}


@code
{
    private OrderModel order = new OrderModel();
    private List<FoodModel> foodItems = new List<FoodModel>();
    private string errorString;

    protected override async Task OnParametersSetAsync()
    {
        HttpResponseMessage response = await Http.GetAsync("api/food");

        if (response.IsSuccessStatusCode)
        {
            foodItems = await response.Content.ReadFromJsonAsync<List<FoodModel>>();
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private async Task HandleValidSubmit()
    {
        order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodId).First().Price;

        try
        {
            var response = await Http.PostAsJsonAsync("api/order", order);
            var contents = await response.Content.ReadFromJsonAsync<OrderCreateResultsModel>();

            order = new OrderModel();
            //navigationManager.NavigateTo($"order/display/{contents.Id}");
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }

}
